## referenceS
## - https://www.netlify.com/docs/netlify-toml-reference/
## - https://docs.netlify.com/configure-builds/file-based-configuration/

## current image 2022/04/29
## [https://github.com/netlify/build-image/blob/focal/included_software.md](update marker)


## Settings in the [build] context are global and are applied to all contexts
## unless otherwise overridden by more specific contexts.
[build]
	## Directory with the public files to serve
	publish = "./dist/web/"
	## Directory with the serverless Lambda functions to deploy to AWS.
	## https://www.netlify.com/docs/functions/#tools-for-building-javascript-functions
	functions = "./dist/functions/"
	command = "echo $TEST_ENV_VAR"
	[build.processing]
		skip_processing = true
	[build.environment]
		TEST_ENV_VAR = "build"
		## https://docs.netlify.com/configure-builds/manage-dependencies/#yarn
		## config needed since we use a complex setup
		## can't use semver, such a pain
		## [](update marker)
		YARN_VERSION = "1.22.18"
		## https://www.netlify.com/docs/functions/#javascript-runtime-settings
		## https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
		## NOTE: this doesn't seem to take effect. Unsure about which runtime is selected
		## [](update marker)
		#AWS_LAMBDA_JS_RUNTIME = "nodejs12.x"


## 2020/11 not seen those env vars in FUNCTIONS, they are for build only (override works)
## Production context: All deploys from the main
## repository branch will inherit these settings.
[context.production]
	[context.production.environment]
		TEST_ENV_VAR = "TEVproduction"
## Deploy Preview context: All deploys generated from a pull/merge request
## will inherit these settings.
[context.deploy-preview]
	[context.deploy-preview.environment]
		TEST_ENV_VAR = "TEVdeploy-preview"
## Branch deploy context: All deploys that are not from a pull/merge request
## or from the production branch will inherit these settings.
[context.branch-deploy]
	[context.branch-deploy.environment]
		TEST_ENV_VAR = "TEVbranch-deploy"


## Redirects and headers are GLOBAL for all builds â€“ they do not get scoped to
## contexts no matter where you define them in the file.
## For context-specific rules, use _headers or _redirects files, which are
## PER-DEPLOY.

## Redirects from what the browser requests to what we serve
## https://www.netlify.com/docs/redirects/

#[[headers]]
